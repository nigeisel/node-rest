#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var app = require('../app');
var debug = require('debug')('rest-api:server');
var http = require('http');
var https = require('https');


//TODO: move logic:
var key = fs.readFileSync('encryption/private.key');
var cert = fs.readFileSync('encryption/server.crt');

var credentials = {
    key: key,
    cert: cert
};

/**
 * Get port from environment and store in Express.
 */

var portHttps = 8443;
var portHttp = 8080;


//var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(portHttp);
httpServer.on('error', onError);
httpServer.on('listening', function() {
    onListening(httpServer);
});

httpsServer.listen(portHttps);
httpsServer.on('error', onError);
httpsServer.on('listening', function() {
    onListening(httpsServer);
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
